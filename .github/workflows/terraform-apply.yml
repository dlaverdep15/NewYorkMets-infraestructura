name: Terraform Apply
on:
  # pull_request:
  #   types: [closed]
  push:
    branches:
      - 'feature/pipe'
  
permissions:
  pull-requests: write

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}
    steps:
      - name: Chechout this repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Using Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform init
        run: terraform init

      - name: Format
        run: terraform fmt

      - name: Validate
        run: terraform validate

      - name: Show
        run: terraform show

      - name: list s3
        run: |
          aws s3 ls

      - name: Apply
        run: terraform apply -auto-approve || echo "Error detected"

      - name: Destroy on error
        if: ${{ failure() }}
        run: terraform destroy -auto-approve

      - name: List
        run: |
          ls
          archivos=$(ls)
          if echo "$archivos" | grep -q 'terraform.tfstate'; then
            echo "si esta tf state"
            if aws s3 cp terraform.tfstate s3://newyorkmets-bucket3/; then
              echo "Se ha enviado a S3"
            else
              echo "Error al moverlo, ejecutando destroy"
              terraform destroy -auto-approve
            fi
          else
            echo "no esta tf state"
          fi

      - name: Sleep 5 mins
        run: sleep 300s

      - name: Destroy
        run: terraform destroy -auto-approve
